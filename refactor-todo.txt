1. Use exceptions in FswApp. Error handling in general. Search puts
4. Verify table manager file definitions
5. Create global exception strategy and return values
6. Should I create cmd ERB for kit load/dump table commands?
7. Possible scr script optimize: f42, perfmon, 
8. cfs_kit_global: es.rb tutorial
9. PiControl interface switch needs to warn user of delay and what to check to make sure its working
10. Load table screen instructions look hard coded
11. get_file_prompt: Add path/files whereever possible
12. FM get info packet is missing

	cfs/apps/kit_sch - json/
	cfs/apps/kit_to - xml/
	cfs/osk_defs/cpu1_kit_sch_sch_tbl.json
	cosmos/cfs_kit/file_server/aatmp.txt
	cosmos/cfs_kit/file_server/fm_demo_dir.dat
	cosmos/cfs_kit/file_server/fm_dir_list.dat
	cosmos/cfs_kit/file_server/mm_demo_dmp.dat
	cosmos/cfs_kit/file_server/tmp.bin
	cosmos/cfs_kit/file_server/tmp.dat
	cosmos/config/targets/CFS_KIT/screens/cmd_screen.txt
	cosmos/config/targets/CFS_KIT/screens/osk_tmp_flt_cmd_scr.txt
	cosmos/config/targets/CFS_KIT/screens/osk_tmp_get_bin_file_scr.txt
	cosmos/config/targets/CFS_KIT/screens/osk_tmp_tbl_mgr_scr.txt
	cosmos/config/tools/table_manager/fm_dir_list.txt
	cosmos/lib/ccsds.rb
	cosmos/lib/fsw_app.rb
	cosmos/lib/fsw_msg_id.rb
	cosmos/lib/fsw_perf_id.rb
	cosmos/lib/osk_flight.rb
	cosmos/lib/osk_global.rb
	cosmos/lib/osk_ops.rb
	refactor-todo.txt



            #~gnd_path_filename = "#{GND_SRV_DIR}/#{OSK_TMP_BIN_FILE}"
            #~if (Osk::system.file_transfer.get(flt_path_filename,gnd_path_filename))
            #~   launch_tbl_mgr(REL_SRV_DIR, OSK_TMP_BIN_FILE, tbl_mgr_def_filename)
            #~else  
            #~   raise_exception "osk_ops.send_flt_bin_file_cmd() - File transfer from flight to ground failed" 
            #~end    







NOOP RESET_CTRS RESET SHELL START_APP STOP_APP RESTART_APP RELOAD_APP SEND_APP_INFO WRITE_APP_INFO_TO_FILE CLEAR_SYSLOG WRITE_SYSLOG_TO_FILE CLEAR_ERLOG WRITE_ERLOG_TO_FILE START_LA_DATA STOP_LA_DATA SET_LA_FILTER_MASK SET_LA_TRIG_MASK OVERWRITE_SYSLOG_MODE RESET_PR_CNT SET_MAX_PR_CNT DELETE_CDS TLM_POOL_STATS WRITE_CDS_REG_TO_FILE WRITE_TASK_INFO_TO_FILE

NOOP RESET_CTRS ENA_EVENT_TYPE DIS_EVENT_TYPE SET_EVENT_FMT ENA_APP_EVENT_TYPE ENA_APP_EVENT_GEN DIS_APP_EVENT_GEN RESET_APP_CTRS SET_FILTER_MASK ENA_PORT DIS_PORT RESET_FILTER_CTR RESET_ALL_FILTERS ADD_EVENT_FILTER DEL_EVENT_FILTER WRITE_APP_DATA_TO_FILE FILE_WRITE_LOG_TO_FILE SET_LOG_MODE CLEAR_LOG

SEND_STATS SB WRITE_ROUTING_TO_FILE ENA_ROUTE DIS_ROUTE WRITE_PIPE_TO_FILE WRITE_MAP_TO_FILE ENA_SUB_REPORTING DIS_SUB_REPORTING SEND_PREV_SUBS

LOAD_TBL DUMP_TBL VALIDATE_TBL ACTIVATE_TBL WRITE_REG_TO_FILE TLM_REGISTRY DELETE_CDS ABORT_LOAD


REQUEST_DIAG SET_SOURCE SET_STATE ADD_CLOCK_LAT SUB_CLOCK_LAT SET_CLOCK SET_CLOCK_MET SET_CLOCK_STCF SET_CLOCK_LEAP ADD_STCF_ADJ SUB_STCF_ADJ ADD_1HZ_STCF_ADJ SUB_1HZ_STCF_ADJ SET_SIGNAL 



def cfe_send_cmd_with_param(screen, target_name, cmd_name, param_cnt)

   #puts "cfe_send_cmd_with_param(): #{target_name}, #{cmd_name}, #{param_cnt}"
   # Read parameters from screen
   cmd_param_str = "with #{screen.get_named_widget("param_1").text} #{screen.get_named_widget("value_1").text}"
   for i in 2..param_cnt
      cmd_param_str << " , #{screen.get_named_widget("param_#{i}").text} #{screen.get_named_widget("value_#{i}").text}"
   end

   cmd("#{target_name} #{cmd_name} #{cmd_param_str}"); 

   clear("CFS_KIT #{OSK_TMP_CMD_SCR_STR}")  
   
end # cfe_send_cmd_with_param()


################################################################################
## Send Command Support Functions
################################################################################

def cfs_kit_send_cmd(target_name, cmd_name)

   cmd_param_list = get_cmd_param_list(target_name, cmd_name)
   
   # CCSDS header field counted as parameters 
   if (cmd_param_list.length <= 5)
      cmd("#{target_name} #{cmd_name}"); 
   else
      cfs_kit_create_cmd_screen(target_name, cmd_name, cmd_param_list.drop(5))
      display("CFS_KIT #{OSK_TMP_CMD_SCR_STR}",50,50)
   end

end


def cfs_kit_create_cmd_screen(target_name, cmd_name, cmd_param_list)

cmd_scr_header = "
   ###############################################################################
   # Command Screen
   #
   # Temporary screen created to allow the user to use a simple GUI to enter 
   # command parameters. Basically a short cut to COSMOS Command and Telemetry
   # Server capability.  
   #
   # License:
   #   Written by David McComas, licensed under the copyleft GNU General Public
   #   License (GPL).
   #
   ###############################################################################

   SCREEN AUTO AUTO 0.5
   GLOBAL_SETTING BUTTON BACKCOLOR 221 221 221
  
   TITLE #{cmd_name}
      SETTING BACKCOLOR 162 181 205
      SETTING TEXTCOLOR black

   VERTICALBOX \"Command Parameters\"
   MATRIXBYCOLUMNS 2
" 

cmd_scr_trailer = "
   END # Matrix
   END # Vertical

   HORIZONTALLINE

   MATRIXBYCOLUMNS 2      
      BUTTON 'Send'   'require \"#{Cosmos::USERPATH}/config/targets/CFS_KIT/lib/cfe_screen.rb\"; cfe_send_cmd_with_param(self, \"#{target_name}\", \"#{cmd_name}\", #{cmd_param_list.length})'
      BUTTON 'Cancel' 'require \"#{Cosmos::USERPATH}/config/targets/CFS_KIT/lib/cfe_screen.rb\"; cfe_send_cmd(self, \"CANCEL\")'
   End # Matrix
"

   #puts "GUI: #{target_name} #{cmd_name}"
   #puts "Cmd param length = #{cmd_param_list.length}"
   #puts "#{cmd_param_list}"
   
   cmd_scr_file = "#{CFS_KIT_SCR_DIR}/#{OSK_TMP_CMD_SCR_FILE}"
   #puts "#{cmd_scr_file}"
      
   begin
      
      
      # Always overwrite the temp file      
      File.open("#{cmd_scr_file}","w") do |f| 
	     
         f.write ("#{cmd_scr_header}")

         param_num = 1
         cmd_param_str = ""
         cmd_param_list.each do |param|
            cmd_param_str << "   NAMED_WIDGET param_#{param_num} LABEL '#{param[0]}'\n"         
            cmd_param_str << "   NAMED_WIDGET value_#{param_num} TEXTFIELD 16 \"#{param[1]}\"\n"
            param_num += 1
         end
         
         f.write ("#{cmd_param_str}")
         f.write ("#{cmd_scr_trailer}")

      end # File
      
   rescue Exception => e
      puts e.message
      puts e.backtrace.inspect  
   end

end # cfs_kit_create_cmd_screen()

   ############################################################################
   ##  Class functions that support scripts  
   ############################################################################

   def FswApp.suppress_exception(boolean)
      @@supress_execption = boolean
   end

   ############################################################################
   ##  Class functions that support sending commands from a screen 
   ############################################################################
   
   #
   # Designed to be called Called from a screen. It provides a lighter weigth 
   # method (rather than cmd-tlm-server tool) to get user input for command
   # parameters.
   # - If command has no parameters, cmd is sent immediatley
   # - If command has parameters a paramter input screen is created
   #
   def FswApp.send_scr_cmd(target_name, cmd_name)

      cmd_param_list = get_cmd_param_list(target_name, cmd_name)
   
      # CCSDS header field counted as parameters 
      if (cmd_param_list.length <= 5)
         cmd("#{target_name} #{cmd_name}"); 
      else
         FswApp.create_cmd_screen(target_name, cmd_name, cmd_param_list.drop(5))
         display("CFS_KIT #{OSK_TMP_CMD_SCR_STR}",50,50)
      end

   end #send_scr_cmd()

   #
   # Reads command parameters from temp input screen then sends the cmd 
   #
   def FswApp.send_scr_cmd_with_param(screen, target_name, cmd_name, param_cnt)

      #puts "cfe_send_cmd_with_param(): #{target_name}, #{cmd_name}, #{param_cnt}"
      # Read parameters from screen
      cmd_param_str = "with #{screen.get_named_widget("param_1").text} #{screen.get_named_widget("value_1").text}"
      for i in 2..param_cnt
         cmd_param_str << " , #{screen.get_named_widget("param_#{i}").text} #{screen.get_named_widget("value_#{i}").text}"
      end

      cmd("#{target_name} #{cmd_name} #{cmd_param_str}"); 

      clear("CFS_KIT #{OSK_TMP_CMD_SCR_STR}")  
   
   end # send_scr_cmd_with_param()


   def FswApp.create_cmd_screen(target_name, cmd_name, cmd_param_list)

   cmd_scr_header = "
   ###############################################################################
   # Command Screen
   #
   # Temporary screen automatically created to allow the user to use a simple GUI
   # to enter command parameters. Basically a short cut to COSMOS Command and 
   # Telemetry Server capability.  
   #
   # License:
   #   Written by David McComas, licensed under the copyleft GNU General Public
   #   License (GPL).
   #
   ###############################################################################

   SCREEN AUTO AUTO 0.5
   GLOBAL_SETTING BUTTON BACKCOLOR 221 221 221
  
   TITLE #{cmd_name}
      SETTING BACKCOLOR 162 181 205
      SETTING TEXTCOLOR black

   VERTICALBOX \"Command Parameters\"
   MATRIXBYCOLUMNS 2\n" 

   cmd_scr_trailer = "
   END # Matrix
   END # Vertical

   HORIZONTALLINE

   MATRIXBYCOLUMNS 2      
      BUTTON 'Send'   'require \"#{Cosmos::USERPATH}/lib/fsw_app.rb\"; FswApp.send_scr_cmd_with_param(self, \"#{target_name}\", \"#{cmd_name}\", #{cmd_param_list.length})'
      BUTTON 'Cancel' 'clear(\"CFS_KIT #{OSK_TMP_CMD_SCR_STR}\")'
   End # Matrix\n"

   #puts "GUI: #{target_name} #{cmd_name}"
   #puts "Cmd param length = #{cmd_param_list.length}"
   #puts "#{cmd_param_list}"
   
   cmd_scr_file = "#{CFS_KIT_SCR_DIR}/#{OSK_TMP_CMD_SCR_FILE}"
   #puts "#{cmd_scr_file}"
      
      begin
         
         
         # Always overwrite the temp file      
         File.open("#{cmd_scr_file}","w") do |f| 
           
            f.write ("#{cmd_scr_header}")

            param_num = 1
            cmd_param_str = ""
            cmd_param_list.each do |param|
               cmd_param_str << "   NAMED_WIDGET param_#{param_num} LABEL '#{param[0]}'\n"         
               cmd_param_str << "   NAMED_WIDGET value_#{param_num} TEXTFIELD 16 \"#{param[1]}\"\n"
               param_num += 1
            end
            
            f.write ("#{cmd_param_str}")
            f.write ("#{cmd_scr_trailer}")

         end # File
         
      rescue Exception => e
         puts e.message
         puts e.backtrace.inspect  
      end

   end # create_cmd_screen()

  =========================================
  OLD
  
     #~ Finish refactor and delete if all calls to send_flt_bin_file_cmd()
   # Flight Directory Listing
   # 1. FM directory listing to a file
   # 2. Transfer file to the ground
   # 3. Use COSMOS Table Manager to display the listing
   #
   def self.list_flt_dir(flt_dir_name)
      flt_path_filename = "#{FLT_SRV_DIR}/#{OSK_TMP_BIN_FILE}"
      if (Osk::flight.fm.send_cmd("WRITE_DIR_TO_FILE with DIRECTORY #{flt_dir_name}, FILENAME #{flt_path_filename}"))
         get_file = combo_box("Transfer file from flight to ground and display it?", 'Yes','No')
         if (get_file == "Yes")
            gnd_path_filename = "#{GND_SRV_DIR}/#{OSK_TMP_BIN_FILE}"
            if (Osk::system.file_transfer.get(flt_path_filename,gnd_path_filename))
               launch_tbl_mgr(REL_SRV_DIR, OSK_TMP_BIN_FILE, TBL_MGR_DEF_FM_DIR)
               #~   get_flt_bin_file(flt_path_filename, GND_SRV_DIR, OSK_TMP_BIN_FILE, TBL_MGR_DEF_FM_DIR)
               #~   spawn("ruby #{Cosmos::USERPATH}/tools/TableManager ")
               #~   prompt("In Table Manager: 1-File->Open->cfs_kit/file_server #{OSK_TMP_BIN_FILE}, 2-Select fm_dir_list.txt definition file")
            else  
               raise_exception "osk_ops.list_flt_dir() - File transfer from flight to ground failed" 
            end    
         end
      else
         raise_exception "osk_ops.list_flt_dir() - File Manager(FM) 'dir to file' command failed"
      end
   end # list_dir()


  
  
  
  

