###############################################################################
# cFS Kit Main Screen ruby scripts
#
# Notes:
#   1. Written by David McComas, licensed under the copyleft GNU
#      General Public License (GPL).
# 
# TODO - Use GEM for TFTP class. Can't directly require because screen context won't allow. Does work from script runner.
# TODO - After TFTP installed as a GEM:
#        1. Decide how to manage global constants. Stay in this file or separate file
#        2. Move file & table demos to own ruby files
# TODO - File Demo: Use FILE_MGMT_DEMO variable prefix, Display directory listing file after transfer to ground
# TODO - App Development: Enable event type: use app combo box for installed apps. Explain bit mask.
#
# Create Table TLM demo screen, table script and remove from proto cmd
# Create manage files and manage table screens
#
################################################################################

require 'cosmos'
require 'cosmos/script'
Cosmos.catch_fatal_exception do
  require 'cosmos/tools/cmd_sender/cmd_sender'
  require 'cosmos/tools/tlm_viewer/screen'
  require 'cosmos/tools/tlm_viewer/tlm_viewer'
end

IP_ADDR = "127.0.0.1"

BUTTON_CONT = "OK"
BUTTON_CANCEL = "Cancel"  # Equal to hardcoded message_box() string
UNDEFSTR = "Undefined"

MSG_TBD_FEATURE = "Coming Soon"

GND_WORK_DIR = "#{Cosmos::USERPATH}/procedures/file_server"
FLT_WORK_DIR = "/cf"

FLT_TEST_GET_FILE = "#{FLT_WORK_DIR}/tf_get_test_src.txt"
FLT_TEST_PUT_FILE = "#{FLT_WORK_DIR}/tf_put_test_dst.txt"
GND_TEST_GET_FILE = "#{Cosmos::USERPATH}/procedures/file_server/tf_get_test_dst.txt"
GND_TEST_PUT_FILE = "#{Cosmos::USERPATH}/procedures/file_server/tf_put_test_src.txt"

FLT_TMP_TBL_FILE = "#{FLT_WORK_DIR}/~tbl_tmp.dat"    
GND_TMP_TBL_FILE = "#{Cosmos::USERPATH}/procedures/file_server/~tbl_tmp.dat"
GND_TMP_TBL_NO_HDR_FILE = "#{Cosmos::USERPATH}/outputs/tables/~tbl_tmp_no_hdr.dat"

###############################################################################
## Screen: Launch Applications
################################################################################

def kit_main_launch_app(screen, app)

	if (app == "CFS")
    spawn("xfce4-terminal --default-working-directory=""#{Cosmos::USERPATH}/../cfs/build/exe/cpu1"" --execute sudo ./core-cpu1""")
    wait(3)
    cmd("TO ENABLE_TELEMETRY")
	elsif (app == "Eclipse")
		spawn("sudo #{Cosmos::USERPATH}/../eclipse/eclipse/eclipse")
	elsif (app == "BENCHMARKS")
		display("CFS_KIT BENCHMARK_SCREEN",50,50) 
	elsif (app == "PERF_MONITOR")
    display("CFS_KIT PERF_MONITOR_SCREEN",50,50)
	elsif (app == "RUN_TEST_SCRIPT")
    sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
    if (sel != BUTTON_CONT) then return end  
    system("ruby #{Cosmos::USERPATH}/tools/ScriptRunner #{Cosmos::USERPATH}/procedures/kit_test/kit_test_main.rb")
	elsif (app == "MANAGE_FILES")
    display("CFS_KIT FILE_MGMT_SCREEN",50,50)
  elsif (app == "MANAGE_TABLES")
    display("CFS_KIT TABLE_MGMT_SCREEN",50,50)
  else
    prompt("Error in screen definition file. Undefined commmand sent to kit_main_launch_app()")
  end

end # kit_main_launch_app()

###############################################################################
## Screen: Launch Demo
################################################################################

def kit_main_launch_demo(screen, demo)

  if (demo == "DATA_STORAGE_DEMO")
    prompt(MSG_TBD_FEATURE)  
  elsif (demo == "FILE_DEMO")
		display("CFS_KIT FILE_DEMO_MSG_SCREEN",50,50) 
		display("CFS_KIT FILE_DEMO_TLM_SCREEN",50,50) 	
	elsif (demo == "HEATER_CONTROL_DEMO")
    display("CFS_KIT HEATER_DEMO_SCREEN",50,50)
	elsif (demo == "PERF_MONITOR_DEMO")
    prompt(MSG_TBD_FEATURE)  
	elsif (demo == "TABLE_DEMO")
		display("CFS_KIT TABLE_DEMO_MSG_SCREEN",50,50) 
		display("CFS_KIT TABLE_DEMO_TLM_SCREEN",50,50) 	
  else
    prompt("Error in screen definition file. Undefined commmand sent to kit_main_launch_demo()")
  end

end # kit_main_launch_demo()

###############################################################################
## Screen: Send Commands
################################################################################

def kit_main_send_cmd(screen, cmd)

	if (cmd == "TO_ENA_TELEMETRY")
    cmd("TO ENABLE_TELEMETRY")
	elsif (cmd == "TIME_SET_CLOCK_ZERO")
    cmd("TIME SET_CLOCK_MET with SECONDS 0, MICROSECONDS 0"); 
    cmd("TIME SET_CLOCK with SECONDS 0, MICROSECONDS 0")
	elsif (cmd == "EVS_ENA_APP_EVENT_TYPE")
    app_name = ask_string("Enter app name")
    bit_mask = ask_string("Enter event type bit mask")
    cmd("EVS ENA_APP_EVENT_TYPE with APPNAME #{app_name}, BITMASK 0x0F")
  elsif (cmd == "ES_DISPLAY_APPS")
    prompt(MSG_TBD_FEATURE)
  elsif (cmd == "ES_RELOAD_APP")
    Cosmos.run_process("ruby tools/CmdSender -p \"ES RELOAD_APP\"")
  elsif (cmd == "ES_START_APP")
    Cosmos.run_process("ruby tools/CmdSender -p \"ES START_APP\"")
  elsif (cmd == "ES_STOP_APP")
    app_name = ask_string("Enter app name")
    cmd("ES STOP_APP with APPLICATION #{app_name}")
  elsif (cmd == "ES_QUERY_APP")
    prompt(MSG_TBD_FEATURE)
  elsif (cmd == "PROTO_NEW_CMD")
	  # TODO - Some potential new commands
    # (cmd == "DISPLAY_SB_ROUTES")
    # (cmd == "DISPLAY_MSG_IDS")
    # (cmd == "CFS_HTML_DOC")
    value = combo_box("Select the command being developed", 'Put File', 'Get File', 'Display SB Routes')
    case value
    when 'Put File'
      file = FileXfer.new(IP_ADDR)
      file.put(GND_TEST_PUT_FILE, FLT_TEST_PUT_FILE)
    when 'Get File'
      file = FileXfer.new(IP_ADDR)
      file.get(FLT_TEST_PUT_FILE,GND_TEST_PUT_FILE)
    when 'Display SB Routes'
      cmd("SB WRITE_ROUTING_TO_FILE with FILENAME '/cf/~sb_tmp.dat'")
    end
  else
    prompt("Error in screen definition file. Undefined commmand sent to kit_main_send_cmd()")
  end
end # kit_main_send_cmd()


###############################################################################
## Utilities
################################################################################


class FileXfer
  
  def initialize (ip_addr)

    @tftp = TFTP.new(ip_addr)

  end

  def get(fsw_filename, gnd_filename)

    @tftp.getbinaryfile(fsw_filename, gnd_filename)
  
  end # get()

  def put (gnd_filename, fsw_filename)

    @tftp.putbinaryfile(gnd_filename, fsw_filename)
    #~app_name = ask_string("Enter local file name")
    #~tftp.putbinaryfile('/tftpboot/pt1.txt', '/cf/tftp.txt')

  end # put()

end # class FileXfer

###############################################################################
# cFS Kit File Management Demo 
#
# Author: David McComas
#
# This is governed by the NASA Open Source Agreement and may be used,
# distributed and modified only pursuant to the terms of that agreement.
#
################################################################################

#require 'cosmos'
#require 'cosmos/script'

FLT_TEMP_DEMO_DIR = "#{FLT_WORK_DIR}/aatmp"  # start name with 'aa' to make it listed first in directory listing

DIR_LIST_FILE = "dir-list.dat"

FILE_DEMO_FLT_PUT_FILE = "#{FLT_TEMP_DEMO_DIR}/put_demo.txt"
FILE_DEMO_GND_PUT_FILE = "#{GND_WORK_DIR}/put_demo.txt"

FILE_DEMO_MSG_INTRO = "\
This demo illustrates some basic file management features. It uses \n\
the Trivial File Transport Protocol (TF) App to transfer files between\n\
the COSMOS ground system and the flight software. The TF app is the\n\
server and a TFTP client has been added to COSMOS.\n\n\

The File Manager (FM) app is used to manage flight software directories,\n\
manage files, and provide information to the user.\n\

The telemetry to the right is a combination of information from FM's\n\
Housekeeping telemetry packet and FM's directory listing packet. The\n\
directory listing packet is sent in response to a SEND_DIR_PKT command.\n\

After you press <#{BUTTON_CONT}> the SEND_DIR_PKT will be sent and the first\n\
10 entries of the #{FLT_WORK_DIR} will be displayed starting with the\n\
first directory entry (i.e. offset zero). Notice the both the FM and child\n\
task command counters increment because the child task does the work.\n\

You may exit the demo by pressing <#{BUTTON_CANCEL}>\n\
"    

FILE_DEMO_MSG_CREATE_TMP_DIR = "\
The next step creates a new directory #{FLT_TEMP_DEMO_DIR} using FM's\ 
CREATE_DIR command.  The new directory appears as the first file in the\n\
directory listing.\
"

FILE_DEMO_MSG_PUT_FILE = "\
The TFTP app TF will be used to write (i.e. put) a new #{FILE_DEMO_FLT_PUT_FILE}\n\
from the ground to the FSW. A directory directory listing of #{FLT_TEMP_DEMO_DIR}\n\
shows the new file has been created.
"

FILE_DEMO_MSG_WRITE_DIR_TO_FILE = "\
The next step writes the directory listing of #{FLT_WORK_DIR} to\n\
a file in #{FLT_TEMP_DEMO_DIR} using FM's WRITE_DIR_TO_FILE command.\n\

The TF app is used to get the file from the FSW and write it to the ground\n\
file #{GND_WORK_DIR}/#{DIR_LIST_FILE}\n\
"

FILE_DEMO_MSG_DEL_TEMP_DIR = "\
This step deletes all of the files in #{FLT_TEMP_DEMO_DIR} and then\n\
deletes the directory itself. The files in a directory must be deleted prior\n\
to deleting the directory. 
"

def file_demo_main(screen)

  file = FileXfer.new(IP_ADDR)

  # 1. Intro 
  msg_widget = screen.get_named_widget("msg_box")
  msg_widget.text = FILE_DEMO_MSG_INTRO
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  if (sel == BUTTON_CANCEL) then
    clear("CFS_KIT FILE_DEMO_MSG_SCREEN")
    clear("CFS_KIT FILE_DEMO_TLM_SCREEN")
    return 
  end
  
  # 2. FLT_WORK_DIR directory listing
  cmd("FM SEND_DIR_PKT with DIRECTORY #{FLT_WORK_DIR}, DIRLISTOFFSET 0")
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  
  # 3. Create tmp directory & display in directory listing
  msg_widget.text = FILE_DEMO_MSG_CREATE_TMP_DIR
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  cmd("FM CREATE_DIR with DIRECTORY #{FLT_TEMP_DEMO_DIR}")
  wait (1)
  cmd("FM SEND_DIR_PKT with DIRECTORY #{FLT_WORK_DIR}, DIRLISTOFFSET 0")
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)

  # 4. Put file in temp directory & display in directory listing
  msg_widget.text = FILE_DEMO_MSG_PUT_FILE
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  file.put(FILE_DEMO_GND_PUT_FILE,FILE_DEMO_FLT_PUT_FILE)
  cmd("FM SEND_DIR_PKT with DIRECTORY #{FLT_TEMP_DEMO_DIR}, DIRLISTOFFSET 0")
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)

  # 5. Write FLT_WORK_DIR dir listing to a file in the temp directory, get to the ground & display file
  msg_widget.text = FILE_DEMO_MSG_WRITE_DIR_TO_FILE
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  cmd("FM WRITE_DIR_TO_FILE with DIRECTORY #{FLT_WORK_DIR}, FILENAME #{FLT_TEMP_DEMO_DIR}/#{DIR_LIST_FILE}")
  cmd("FM SEND_DIR_PKT with DIRECTORY #{FLT_TEMP_DEMO_DIR}, DIRLISTOFFSET 0")
  file.get("#{FLT_TEMP_DEMO_DIR}/#{DIR_LIST_FILE}","#{GND_WORK_DIR}/#{DIR_LIST_FILE}")
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)

  # 6. Delete FLT_TEMP_DEMO_DIR
  msg_widget.text = FILE_DEMO_MSG_DEL_TEMP_DIR
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  cmd("FM DELETE_ALL_FILES with DIRECTORY #{FLT_TEMP_DEMO_DIR}")
  wait(1)
  cmd("FM DELETE_DIR with DIRECTORY #{FLT_TEMP_DEMO_DIR}")
  cmd("FM SEND_DIR_PKT with DIRECTORY #{FLT_WORK_DIR}, DIRLISTOFFSET 0")
  sel = message_box("Demo complete. Press #{BUTTON_CONT} to exit",BUTTON_CONT)

  clear("CFS_KIT FILE_DEMO_MSG_SCREEN")
  clear("CFS_KIT FILE_DEMO_TLM_SCREEN")
  
end # file_demo_main()

###############################################################################
# cFS Kit File Management 
#
# Author: David McComas
#
# This is governed by the NASA Open Source Agreement and may be used,
# distributed and modified only pursuant to the terms of that agreement.
#
################################################################################

#require 'cosmos'
#require 'cosmos/script'

FILE_MGMT_FLT_WORK_DIR = FLT_WORK_DIR
FILE_MGMT_GND_WORK_DIR = GND_WORK_DIR

#~ Is there a way to have a script run when a screen is first displayed?

def file_mgmt_send_cmd(screen, cmd)

	if (cmd == "GET_FILE")
    file = FileXfer.new(IP_ADDR)
    flt_full_file_name = ask_string("Enter full FSW path/filename.")
    gnd_file_name = ask_string("Enter ground filename. File must be in COSMOS server location.")
    gnd_full_file_name = "#{GND_WORK_DIR}/#{gnd_file_name}"
    file.get(flt_full_file_name,gnd_full_file_name)
	elsif (cmd == "PUT_FILE")
    file = FileXfer.new(IP_ADDR)
    gnd_file_name = ask_string("Enter ground filename. File must be in COSMOS server location.")
    gnd_full_file_name = "#{GND_WORK_DIR}/#{gnd_file_name}"
    flt_full_file_name = ask_string("Enter full FSW path/filename.")
    file.put(gnd_full_file_name,flt_full_file_name)
  elsif (cmd == "CREATE_DIR")
    dir_name = ask_string("Enter full path of new directory.")
    cmd("FM CREATE_DIR with DIRECTORY #{dir_name}")  
	elsif (cmd == "DELETE_DIR")
    dir_name = ask_string("Enter full path of directory to be deleted.")
    cmd("FM DELETE_DIR with DIRECTORY #{dir_name}")  
	elsif (cmd == "LIST_DIR_TO_PKT")
    dir_name = ask_string("Enter full path of directory to be listed.")
    offset = ask_string("Enter starting offset (0..N) of first file to list.")
    cmd("FM SEND_DIR_PKT with DIRECTORY #{dir_name}, DIRLISTOFFSET #{offset}")  
	elsif (cmd == "WRITE_DIR_TO_FILE")
    dir_name = ask_string("Enter full path of directory to be listed.")
    flt_full_file_name = ask_string("Enter full FSW path/filename that will be written.")
    cmd("FM WRITE_DIR with DIRECTORY #{dir_name}, FILENAME #{flt_full_file_name}")  
	elsif (cmd == "COPY_FILE")
    src_file_name = ask_string("Enter full source path/filename.")
    dst_file_name = ask_string("Enter full destination path/filename.")
    cmd("FM COPY_FILE with SOURCE #{src_file_name}, TARGET #{dst_file_name}")  
	elsif (cmd == "MOVE_FILE")
    src_file_name = ask_string("Enter full source path/filename.")
    dst_file_name = ask_string("Enter full destination path/filename.")
    overwrite_str = combo_box("Overwrite destination if it exists?", 'Yes','No')
    if (overwrite_str == 'Yes') 
      overwrite = 1
    else
      overwrite = 0
    end
    cmd("FM MOVE_FILE with OVERWRITE #{overwrite}, SOURCE #{src_file_name}, TARGET #{dst_file_name}")  
	elsif (cmd == "RENAME_FILE")
    src_file_name = ask_string("Enter full source path/filename.")
    dst_file_name = ask_string("Enter full destination path/filename.")
    cmd("FM RENAME_FILE with SOURCE #{src_file_name}, TARGET #{dst_file_name}")  
	elsif (cmd == "DELETE_FILE")
    file_name = ask_string("Enter full path/filename of file to be deleted.")
    cmd("FM DELETE_FILE with FILENAME #{file_name}")  
	elsif (cmd == "DELETE_ALL_FILES")
    dir_name = ask_string("Enter full path of directory to delete files.")
    cmd("FM DELETE_ALL_FILES with DIRECTORY #{dir_name}")  
	elsif (cmd == "DECOMPRESS_FILE")
    src_file_name = ask_string("Enter full source path/filename.")
    dst_file_name = ask_string("Enter full destination path/filename.")
    cmd("FM DECOMPRESS_FILE with SOURCE #{src_file_name}, TARGET #{dst_file_name}")  
	elsif (cmd == "CONCAT_FILE")
    src1_file_name = ask_string("Enter first full source path/filename.")
    src2_file_name = ask_string("Enter second full source path/filename.")
    dst_file_name = ask_string("Enter full destination path/filename.")
    cmd("FM CONCAT_FILES with SOURCE1 #{src1_file_name}, SOURCE2 #{src2_file_name}, TARGET #{dst_file_name}")  
	elsif (cmd == "GET_FILE_INFO")
    #TODO - Add variability. Default to CFE_ES_CRC_16 (only one implemented)
    file_name = ask_string("Enter full source path/filename.")
    display("FM FILE_INFO_PKT",50,50)
    cmd("FM GET_FILE_INFO with #{file_name}, FILEINFOCRC 2")  
	elsif (cmd == "LIST_OPEN_FILES")
    display("FM OPEN_FILES_PKT",50,50)
    cmd("FM GET_OPEN_FILES")  
  else
    prompt("Error in screen definition file. Undefined commmand sent to file_mgmt_send_cmd()")
  end
  
end # file_mgmt_send_cmd()


###############################################################################
# cFS Kit Table Management 
#
# Author: David McComas
#
# This is governed by the NASA Open Source Agreement and may be used,
# distributed and modified only pursuant to the terms of that agreement.
#
################################################################################

#require 'cosmos'
#require 'cosmos/script'

TABLE_MGMT_FLT_WORK_DIR = FLT_WORK_DIR
TABLE_MGMT_GND_WORK_DIR = GND_WORK_DIR

#~ Is there a way to have a script run when a screen is first displayed?

def table_mgmt_send_cmd(screen, cmd)

	if (cmd == "LOAD_TABLE")
    tbl_file_name = ask_string("Enter full FSW path/filename of table file to be loaded.")
    cmd("TBL LOAD_TBL with LOADFILENAME #{tbl_file_name}")
	elsif (cmd == "ABORT_TABLE_LOAD")
    tbl_name = ask_string("Enter complete table name (app.table) of load to be aborted.")
    cmd("TBL ABORT_LOAD with TABLENAME #{tbl_name}")
	elsif (cmd == "DUMP_TABLE")
    tbl_name = ask_string("Enter complete table name (app.table) of table to be dumped.")
    tbl_file_name = ask_string("Enter full FSW path/filename of file to received the table")
    buffer = combo_box("Select the buffer to be dumped", 'Inactive','Active')
    if (buffer == 'Active') 
      buffer_id = 1
    else
      buffer_id = 0
    end
    cmd("TBL DUMP_TBL with ACTIVETBLFLAG #{buffer_id}, TABLENAME #{tbl_name}, DUMPFILENAME #{tbl_file_name}")
	elsif (cmd == "VALIDATE")
    tbl_name = ask_string("Enter complete table name (app.table) of table to be validated.")
    buffer = combo_box("Select the buffer to be validated", 'Inactive','Active')
    if (buffer == 'Active') 
      buffer_id = 1
    else
      buffer_id = 0
    end
    cmd("TBL VALIDATE_TBL with ACTIVETBLFLAG #{buffer_id}, TABLENAME #{tbl_name}")
	elsif (cmd == "ACTIVATE")
    tbl_name = ask_string("Enter complete table name (app.table) of table to be activated.")
    cmd("TBL ACTIVATE_TBL with TABLENAME #{tbl_name}")
	elsif (cmd == "DISPLAY_ONE_REGISTRY")
    tbl_name = ask_string("Enter complete table name (app.table) of table registry to be telemetered.")
    cmd("TBL TLM_REGISTRY with TABLENAME #{tbl_name}")
	elsif (cmd == "WRITE_REGISTRY_TO_FILE")
    reg_file_name = ask_string("Enter full FSW path/filename of file to received the registry data.")
    cmd("TBL WRITE_REG_TO_FILE with DUMPFILENAME #{reg_file_name}")
  else
    prompt("Error in screen definition file. Undefined commmand sent to table_mgmt_send_cmd()")
  end
  
end # table_mgmt_send_cmd()


###############################################################################
# cFS Kit Table Management Demo 
#
# Author: David McComas
#
# This is governed by the NASA Open Source Agreement and may be used,
# distributed and modified only pursuant to the terms of that agreement.
#
################################################################################

#require 'cosmos'
#require 'cosmos/script'

TABLE_DEMO_TBL_NAME = "FM.FreeSpace"

TABLE_DEMO_FLT_FILE = "#{FLT_WORK_DIR}/tbl_tmp.dat"
TABLE_DEMO_GND_FILE = "#{GND_WORK_DIR}/tbl_tmp.dat"

TABLE_DEMO_MSG_INTRO = "\
This demo illustrates some basic table management features using FIle\n\
Manager's #{TABLE_DEMO_TBL_NAME}. \n\

The telemetry to the right is a combination of information from the cfE's\n\
Table Service (TBL) Housekeeping telemetry packet and TBL's table resgirty\n\
packet. The registry packet is sent in response to a TLM_REGISTRY command.\n\

After you press <#{BUTTON_CONT}> the TLM_REGISTRY command will be sent.\n\

You may exit the demo by pressing <#{BUTTON_CANCEL}>\n\
"    

TABLE_DEMO_MSG_DUMP = "\
The next step creates dumps the active table.\ 
"

TABLE_DEMO_MSG_GET_FILE = "\
The next step transfers the table file to the ground.\ 
"

TABLE_DEMO_MSG_DISPLAY = "\
The next step strips the cFE header from the table file and displays the\n\
file in the COSMOS Table Manager tool.
"

def table_demo_main(screen)

  file = FileXfer.new(IP_ADDR)

  # 1. Intro 
  msg_widget = screen.get_named_widget("msg_box")
  msg_widget.text = TABLE_DEMO_MSG_INTRO
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  if (sel == BUTTON_CANCEL) then
    table_demo_exit(true)
    return 
  end
  cmd("TBL TLM_REGISTRY with TABLENAME #{TABLE_DEMO_TBL_NAME}")

  # 2. Dump active table to file
  msg_widget.text = TABLE_DEMO_MSG_DUMP
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  cmd_valid_cnt = tlm("TBL HK_TLM_PKT CMD_VALID_COUNT")
  cmd_error_cnt = tlm("TBL HK_TLM_PKT CMD_ERROR_COUNT")
  seq_cnt = tlm("TBL HK_TLM_PKT CCSDS_SEQUENCE")
  cmd("TBL DUMP_TBL with ACTIVETBLFLAG 1, TABLENAME 'FM.FreeSpace', DUMPFILENAME #{FLT_TMP_TBL_FILE}")
  wait("TBL HK_TLM_PKT CCSDS_SEQUENCE != #{seq_cnt}", 10)  # Delay until updated sequence count or timeout
  if ( (tlm("TBL HK_TLM_PKT CMD_VALID_COUNT") != (cmd_valid_cnt + 1)) || 
       (tlm("TBL HK_TLM_PKT CMD_ERROR_COUNT") !=  cmd_error_cnt))
    table_demo_exit(false,"Dump table command counter check failed")
    return 
  end
  
  # 3. Transfer table file to ground
  msg_widget.text = TABLE_DEMO_MSG_GET_FILE
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  cmd_valid_cnt = tlm("FT HK_TLM_PKT CMD_VALID_COUNT")
  cmd_error_cnt = tlm("FT HK_TLM_PKT CMD_ERROR_COUNT")
  seq_cnt = tlm("TBL HK_TLM_PKT CCSDS_SEQUENCE")
  get_file_cnt = tlm("FT HK_TLM_PKT GET_FILE_COUNT")
  file.get(TABLE_DEMO_FLT_FILE,TABLE_DEMO_GND_FILE)
  wait("FT HK_TLM_PKT CCSDS_SEQUENCE != #{seq_cnt}", 10)  # Delay until updated sequence count or timeout
  if ( (tlm("TBL HK_TLM_PKT CMD_VALID_COUNT") != (cmd_valid_cnt+1)) || 
       (tlm("TBL HK_TLM_PKT CMD_ERROR_COUNT") !=  cmd_error_cnt) ||
       (tlm("TBL HK_TLM_PKT GET_FILE_COUNT")  !=  (get_file_cnt+1)) )
    table_demo_exit(false,"Get file command counter check failed")
    return 
  end


  # 3. Strip big endian file header from file 
  #~tbl_file = IO.binread(GND_TMP_TBL_FILE)
  msg_widget.text = TABLE_DEMO_MSG_DISPLAY
  sel = message_box("Press #{BUTTON_CONT} to continue",BUTTON_CONT)
  IO.copy_stream(GND_TMP_TBL_FILE,GND_TMP_TBL_NO_HDR_FILE,File.size(GND_TMP_TBL_FILE)-64 ,64)

  table_demo_exit(true)
  
end # table_demo_main()

def table_demo_exit(passed,error_str='')

  if (passed)
     sel = message_box("Demo complete. Press #{BUTTON_CONT} to exit",BUTTON_CONT)
  else
     message_box("Demo failed to complete. #{error_str}",BUTTON_CONT)
  end

  # Clear last to allow user to look at screen before exiting.
  clear("CFS_KIT TABLE_DEMO_MSG_SCREEN")
  clear("CFS_KIT TABLE_DEMO_TLM_SCREEN")
 
end # table_demo_exit()

###############################################################################
## TFTP 
################################################################################
#! /usr/bin/ruby
#--
# Copyright (c) 2004, Guillaume Marcais (guillaume.marcais@free.fr)
# All rights reserved.
# This file is distributed under the Ruby license.
# http://net-tftp.rubyforge.org
#++
#
# == Description
# TFTP is used by many devices to upload or download their configuration,
# firmware or else. It is a very simple file transfer protocol built on top
# of UDP. It transmits data by chunck of 512 bytes. It waits for an ack after 
# each data packet but does not do any data integrety checks. 
# There is no authentication mechanism nor any way too list the content of 
# the remote directories. It just sends or retrieves files.
#
# == Usage
# Using TFTP is fairly trivial:
# <pre>
# <code>
# require 'net/tftp'
# t = Net::TFTP.new('localhost')
# t.getbinaryfile('remote_file', 'local_file')
# t.putbinaryfile('local_file', 'remote_file')
# </code>
# </pre>
#
# That's pretty much it. +getbinaryfile+ and +putbinaryfile+ can take a
# block which will be called every time a block is sent/received.
#
# == Known limitations
# * RFC 1350 mention a net-ascii mode. I am not quite sure what transformation
#   on the data should be done and it is not (yet) implemented.
# * None of the extensions of TFTP are implemented (RFC1782, RFC1783, RFC1784, 
#   RFC1785, RFC2347, RFC2348, RFC2349).
 
require 'socket'
require 'timeout'

#~module Net # :nodoc:

  class TFTPError < StandardError; end
  class TFTPTimeout < TFTPError; end
  class TFTPProtocol < TFTPError
    attr_reader :code
    def initialize(msg, code)
      super(msg)
      @code = code
    end
  end

  
  class TFTP
    VERSION = "0.1.0"
    DEFAULTS = {
      :port => (Socket.getservbyname("tftp", "udp") rescue 69),
      :timeout => 5,
    }
    
    MINSIZE = 4
    MAXSIZE = 516
    DATABLOCK = 512
    
    # Errors
    ERROR_DESCRIPTION = [
      "Custom error",
      "File not found",
      "Access violation",
      "Disk full",
      "Illegal TFP operation",
      "Unknown transfer ID",
      "File already exists",
      "No such user",
    ]
    ERROR_UNDEF                 = 0
    ERROR_FILE_NOT_FOUND        = 1
    ERROR_ACCESS_VIOLATION      = 2
    ERROR_DISK_FULL             = 3
    ERROR_ILLEGAL_OPERATION     = 4
    ERROR_UNKNOWN_TRANSFER_ID   = 5
    ERROR_FILE_ALREADY_EXISTS   = 6
    ERROR_NO_SUCH_USER          = 7
    
    # Opcodes
    OP_RRQ   = 1
    OP_WRQ   = 2
    OP_DATA  = 3
    OP_ACK   = 4
    OP_ERROR = 5
    
    class << self
      # Alias for new
      def open(host)
        new(host)
      end

      # Return the number of blocks to send _size_ bytes.
      def size_in_blocks(size)
        s = size / DATABLOCK
        s += 1 unless (size % DATABLOCK) == 0
        s
      end
    end
    
    attr_accessor :timeout, :host

    # Create a TFTP connection object to a host. Note that no actual
    # network connection is made. This methods never fails.
    # Parameters:
    # [:port] The UDP port. See DEFAULTS
    # [:timeout] Timeout in second for each ack packet. See DEFAULTS
    def initialize(host, params = {})
      @host = host
      @port = params[:port] || DEFAULTS[:port]
      @timeout = params[:timeout] || DEFAULTS[:timeout]
    end

    # Retrieve a file using binary mode.
    # If the localfile name is omitted, it is set to the remotefile.
    # The optional block receives the data in the block and the sequence number
    # of the block starting at 1.
    def getbinaryfile(remotefile, localfile = nil, &block) # :yields: data, seq
      localfile ||= File.basename(remotefile)
      open(localfile, "w") do |f|
        getbinary(remotefile, f, &block)
      end
    end

    # Retrieve a file using binary mode and send content to an io object
    # The optional block receives the data in the block and the sequence number
    # of the block starting at 1.
    def getbinary(remotefile, io, &block) # :yields: data, seq
      s = UDPSocket.new
      begin
        peer_ip = IPSocket.getaddress(@host)
      rescue
        raise TFTPError, "Cannot find host '#{@host}'"
      end

      peer_tid = nil
      seq = 1
      from = nil
      data = nil

      # Initialize request
      s.send(rrq_packet(remotefile, "octet"), 0, peer_ip, @port)
      Timeout::timeout(@timeout, TFTPTimeout) do
        loop do
          packet, from = s.recvfrom(MAXSIZE, 0)
          next unless peer_ip == from[3]
          type, block, data = scan_packet(packet)
          break if (type == OP_DATA) && (block == seq)
        end
      end
      peer_tid = from[1]

      # Get and write data to io
      loop do
        io.write(data)
        s.send(ack_packet(seq), 0, peer_ip, peer_tid)
        yield(data, seq) if block_given?
        break if data.size < DATABLOCK
        
        seq += 1
        Timeout::timeout(@timeout, TFTPTimeout) do
          loop do
            packet, from = s.recvfrom(MAXSIZE, 0)
            next unless peer_ip == from[3]
            if peer_tid != from[1]
              s.send(error_packet(ERROR_UNKNOWN_TRANSFER_ID), 
                     0, from[3], from[1])
              next
            end
            type, block, data = scan_packet(packet)
            break if (type == OP_DATA) && (block == seq)
          end
        end
      end

      return true
    end

    # Send a file in binary mode. The name of the remotefile is set to
    # the name of the local file if omitted.
    # The optional block receives the data in the block and the sequence number
    # of the block starting at 1.
    def putbinaryfile(localfile, remotefile = nil, &block) # :yields: data, seq
      remotefile ||= File.basename(localfile)
      open(localfile) do |f|
        putbinary(remotefile, f, &block)
      end
    end

    # Send the content read from io to the remotefile.
    # The optional block receives the data in the block and the sequence number
    # of the block starting at 1.
    def putbinary(remotefile, io, &block) # :yields: data, seq
      s = UDPSocket.new
      peer_ip = IPSocket.getaddress(@host)
      
      peer_tid = nil
      seq = 0
      from = nil
      data = nil
      
      # Initialize request
      s.send(wrq_packet(remotefile, "octet"), 0, peer_ip, @port)
      Timeout::timeout(@timeout, TFTPTimeout) do
        loop do
          packet, from = s.recvfrom(MAXSIZE, 0)
          next unless peer_ip == from[3]
          type, block, data = scan_packet(packet)
          break if (type == OP_ACK) && (block == seq)
        end
      end
      peer_tid = from[1]

      loop do
        data = io.read(DATABLOCK) || ""
        seq += 1
        s.send(data_packet(seq, data), 0, peer_ip, peer_tid)
        
        Timeout::timeout(@timeout, TFTPTimeout) do
          loop do
            packet, from = s.recvfrom(MAXSIZE, 0)
            next unless peer_ip == from[3]
            if peer_tid != from[1]
              s.send(error_packet(ERROR_UNKNOWN_TRANSFER_ID), 
                     0, from[3], from[1])
              next
            end
            type, block, void = scan_packet(packet)
            break if (type == OP_ACK) && (block == seq)
          end
        end

        yield(data, seq) if block_given?
        break if data.size < DATABLOCK
      end
      
      return true
    end

    ####################
    # Private methods  #
    ####################
    private
    def rrq_packet(file, mode)
      [OP_RRQ, file, mode].pack("na#{file.size + 1}a#{mode.size + 1}")
    end

    def wrq_packet(file, mode)
      [OP_WRQ, file, mode].pack("na#{file.size + 1}a#{mode.size + 1}")
    end

    def data_packet(block, data)
      [OP_DATA, block, data].pack("nna*")
    end

    def ack_packet(block)
      [OP_ACK, block].pack("nn")
    end

    def error_packet(code, message = nil)
      message ||= ERROR_DESCRIPTION[code] || ""
      [OP_ERROR, code, message].pack("nna#{message.size + 1}")
    end

    # Check if the packet is malformed (unknown opcode, too big, etc.),
    # in which case it returns nil.
    # If it is an error packet, raise an TFTPProtocol error.
    # Returns scanned values otherwise.
    def scan_packet(packet)
      return nil if packet.size < MINSIZE || packet.size > MAXSIZE
      opcode, block_err, rest = packet.unpack("nna*")
      return nil if opcode.nil? || block_err.nil?
      case opcode
      when OP_RRQ, OP_WRQ
        return nil
      when OP_DATA
        return [opcode, block_err, rest]
      when OP_ACK
        return [opcode, block_err]
      when OP_ERROR
        err_msg = "%s: %s"
        err_msg %= [ERROR_DESCRIPTION[block_err] || "", rest.chomp("\000")]
        raise TFTPProtocol.new(err_msg, block_err)
      else
        return nil
      end
    end
  end
#~end
